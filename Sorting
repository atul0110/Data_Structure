/**********************************************************************************************************************
//BUBBLE SORT
**********************************************************************************************************************/

#include<iostream>
using namespace std;

void bubble_sort(int arr[],int n)
{
    for(int i=0;i<n-1;i++){
        for(int j=0;j<n-1;j++){
            if(arr[j]>arr[j+1]){
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
    cout<<"\nSorted array:"<<endl;
    for (int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
}

int main()
{
    int arr[10]={32,41,5,7,43,8,41,10,9,99};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout<<"Unsorted array:"<<endl;
    for (int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
    bubble_sort(arr,n);
    return 0;
}


/**********************************************************************************************************************
//SELECTION SORT
**********************************************************************************************************************/

#include<iostream>
using namespace std;

void selection_sort(int arr[],int n)
{
    for(int i=0;i<n;i++){
        int min = arr[i],flag;
        for(int j=i+1;j<n;j++){
            if(min>arr[j]){
                min=arr[j];
                flag = j;
            }
        }
        int temp = arr[i];
        arr[i]=min;
        arr[flag]=temp;
    }
    cout<<"\nSorted array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
}

int main()
{
    int arr[]={2,5,85,2,55,22,56,78,22,10,12,3,75,32};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout<<"Unsorted array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
    selection_sort(arr,n);

    return 0;
}

/**********************************************************************************************************************
//INSERTION SORT
**********************************************************************************************************************/

#include<iostream>
using namespace std;

void insert_sort(int arr[],int n)
{
    for(int i=1;i<=n;i++){
        for(int j=i;j>0;j--){
            if(arr[j]<arr[j-1]){
                int temp = arr[j-1];
                arr[j-1]=arr[j];
                arr[j]=temp;
            }
        }
    }
    cout<<"\nSorted array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
}

int main()
{
    int arr[]={21,3,32,45,345,4,3,66,22,84,34,23};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout<<"Unsorted array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
    insert_sort(arr,n);
    return 0;
}


/**********************************************************************************************************************
//QUICK SORT (Best sorting algorithm)
**********************************************************************************************************************/

#include<iostream>
using namespace std;

int partition_pivot(int arr[],int l,int r)     //IF PIVOT ELEMENT IS RIGHTMOST
{
    int i = l-1;
    int pi = arr[r];
    for(int j=l;j<r;j++){
        if(arr[j]<pi){
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int t = arr[i+1];
    arr[i+1] = arr[r];
    arr[r] = t;
    return i+1;
}

int partition1(int arr[],int l,int r)   // IF PIVOT ELEMENT IS LEFTMOST
{
    int pi = arr[l];
    int i = r+1;
    for(int j = r;j>l;j--){
        if(arr[j]>pi){
            i--;
            int temp = arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
    int t = arr[i-1];
    arr[i-1]= arr[l];
    arr[l]=t;
    return i-1;
}

void quick_sort(int arr[],int l,int r)
{
    if(l<r){
        int pivot = partition_pivot(arr,l,r);
        quick_sort(arr,l,pivot-1);
        quick_sort(arr,pivot+1,r);
    }
}


int main()
{
    int arr[] = {3,2,7,42,89,452,64,78,45,76,345,7,34};
    int n = sizeof(arr)/sizeof(arr[0]);
    cout<<"Original array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
    quick_sort(arr,0,n-1);
    cout<<"\nSorted array:"<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<"\t";
    }
    return 0;
}
