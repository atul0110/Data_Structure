/*************************************************************************************************************************
//LINEAR QUEUE IMPLEMENTATION USING ARRAY
*************************************************************************************************************************/

#include<iostream>
using namespace std;

int my_queue[100],_front = -1,rear = -1;

void enqueue(int n)
{
    if(rear>=n-1){
        cout<<"Queue Overflow\n"<<endl;
    }
    else{
        int data;
        cout<<"Enter the element to be inserted: ";
        cin>>data;
        if(_front==-1 && rear==-1){
            _front = rear = 0;
        }
        else{
            rear = rear+1;
        }
        my_queue[rear]=data;
        cout<<"Enqueue Successfully\n"<<endl;
    }
}

void dequeue()
{
    if(rear==-1){
        cout<<"Queue Underflow\n"<<endl;
    }
    else{
        if(_front==rear){
            cout<<"Dequeue Successfully, "<<my_queue[_front]<<" is deleted.."<<endl;
            _front = rear = -1;
        }
        else{
            cout<<"Dequeue Successfully, "<<my_queue[_front]<<" is deleted.."<<endl;
            _front = _front+1;
        }
    }
    cout<<"\n";
}

void display()
{
    if(rear == -1){
        cout<<"Queue is empty\n"<<endl;
    }
    else{
        for(int i=_front;i<=rear;i++){
            cout<<my_queue[i]<<"\t";
        }
        cout<<"\n"<<endl;
    }
}

int main()
{
    int n,i=0;
    cout<<"Enter max size: ";
    cin>>n;
    while(i!=4)
    {
        cout<<"=== SELECT ANY ONE ==="<<endl;
        cout<<"1: Enqueue\n2: Dequeue\n3: Display\n4: Exit"<<endl;
        cout<<"Enter your choice: ";
        cin>>i;
        switch(i)
        {
        case 1:
            {
                enqueue(n);
                break;
            }
        case 2:
            {
                dequeue();
                break;
            }
        case 3:
            {
                display();
                break;
            }
        case 4:
            break;
        default:
            cout<<"Invalid input\n"<<endl;
        }
    }
}


/*************************************************************************************************************************
//LINEAR QUEUE IMPLEMENTATION USING LINKED LIST
*************************************************************************************************************************/


#include<iostream>
using namespace std;

struct Node
{
    int data;
    struct Node* next;
};

 struct Node* _front = NULL;
 struct Node* rear = NULL;

 void enqueue()
 {
     struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
     if(new_node==NULL){
        cout<<"Queue overflow\n"<<endl;
     }
     else{
        int data;
        cout<<"Enter the element to be inserted: ";
        cin>>data;
        new_node->data = data;
        if(_front==NULL && rear==NULL){
            _front = new_node;
            rear = new_node;
            new_node->next = NULL;
        }
        else{
            rear->next = new_node;
            rear = new_node;
            new_node->next = NULL;
        }
        cout<<"Enqueue successfully..\n"<<endl;
     }
 }

 void dequeue()
 {
     if(_front==NULL){
        cout<<"Queue Underflow..\n"<<endl;
     }
     else{
        struct Node* ptr = _front;
        _front = _front->next;
        ptr->next=NULL;
        cout<<"Dequeue successfully, "<<ptr->data<<" is deleted..\n"<<endl;
     }
 }

 void display()
 {
     if(_front == NULL){
        cout<<"Queue is empty..\n"<<endl;
     }
     else{
        struct Node* ptr = _front;
        while(ptr!=NULL){
            cout<<ptr->data<<"\t";
            ptr = ptr->next;
        }
        cout<<"\n"<<endl;
     }
 }

 int main()
 {
     int n=0;
     while(n!=4)
     {
         cout<<"=== SELECT ANY ONE ==="<<endl;
         cout<<"1: Enqueue\n2: Dequeue\n3: Display\n4: Exit"<<endl;
         cout<<"Enter your choice: ";
         cin>>n;
         switch(n)
         {
         case 1:
            {
                enqueue();
                break;
            }
         case 2:
            {
                dequeue();
                break;
            }
         case 3:
            {
                display();
                break;
            }
         case 4:
            break;
         default:
            cout<<"Invalid Number\n"<<endl;
         }
     }
     return 0;
 }


/*************************************************************************************************************************
//CIRCULAR QUEUE IMPLEMENTATION USING ARRAY
*************************************************************************************************************************/


 #include<iostream>
 using namespace std;

 int my_queue[100],_front=-1,rear=-1;

 void enQueue(int n)
 {
     if(_front==0 && rear==n-1){
        cout<<"Queue overflow\n"<<endl;
     }
     else if(_front==rear+1){
        cout<<"Queue overflow\n"<<endl;
     }
     else{
        if(_front==-1 && rear==-1){
        _front = rear = 0;
        }
        else if(_front!=0 && rear==n-1){
            rear = 0;
        }
        else{
            rear = rear+1;
        }
        int data;
        cout<<"Enter an element: ";
        cin>>data;
        my_queue[rear]=data;
        cout<<"EnQueue successfully..\n"<<endl;
     }
 }

 void deQueue(int n)
 {
     if(_front==-1 && rear==-1){
        cout<<"Queue Underflow..\n"<<endl;
     }
     else{
        if(_front==rear){
            cout<<"deQueue successfully, "<<my_queue[_front]<<" is deleted\n"<<endl;
            _front = rear = -1;
        }
        else if(_front==n-1){
            cout<<"deQueue successfully, "<<my_queue[_front]<<" is deleted\n"<<endl;
            _front=0;
        }
        else{
            cout<<"deQueue successfully, "<<my_queue[_front]<<" is deleted\n"<<endl;
            _front = _front+1;
        }
     }
 }

 void display(int n)
 {
     if(_front==-1 && rear==-1){
        cout<<"Queue is empty..\n"<<endl;
     }
     else{
        if(_front>rear){
            for(int i=_front;i<=n-1;i++){
                cout<<my_queue[i]<<"\t";
            }
            for(int i=0;i<=rear;i++){
                cout<<my_queue[i]<<"\t";
            }
        }
        else{
            for(int i=_front;i<=rear;i++){
                cout<<my_queue[i]<<"\t";
            }
        }
        cout<<"\n"<<endl;
     }
 }

 int main()
 {
     int i=0,n;
     cout<<"Enter the max size: ";
     cin>>n;
     while(i!=4)
     {
         cout<<"++++ SELECT ANY ONE ++++"<<endl;
         cout<<"1: EnQueue\n2: DeQueue\n3: display\n4: exit"<<endl;
         cout<<"Enter your choice: ";
         cin>>i;
         switch(i)
         {
         case 1:
            {
                enQueue(n);
                break;
            }
         case 2:
            {
                deQueue(n);
                break;
            }
         case 3:
            {
                display(n);
                break;
            }
         case 4:
            break;
         default:
            cout<<"Invalid Number..\n"<<endl;

         }
     }
     return 0;
 }
 
 
/*************************************************************************************************************************
//CIRCULAR QUEUE IMPLEMENTATION USING LINKED LIST
**************************************************************************************************************************/


 #include<iostream>
 using namespace std;

 struct Node
 {
     int data;
     struct Node* next;
 };

 struct Node* _front = NULL;
 struct Node* rear = NULL;

 void enQueue()
 {
     struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
     if(new_node==NULL){
        cout<<"Queue Overflow..\n"<<endl;
     }
     else{
        int data;
        cout<<"Enter an element: ";
        cin>>data;
        new_node->data = data;
        if(_front==NULL && rear==NULL){
            _front = new_node;
            rear = new_node;
            new_node->next = new_node;
        }
        else{
            rear->next = new_node;
            rear = new_node;
            new_node->next = _front;
        }
        cout<<"EnQueue successfully done..\n"<<endl;
     }

 }

 void deQueue()
 {
     if(_front==NULL){
        cout<<"Queue Underflow..\n"<<endl;
     }
     else{
            if(_front==rear){
                cout<<"DeQueue successfully done, "<<_front->data<<" is deleted..\n"<<endl;
                _front = rear =NULL;
            }
            else{
                struct Node* ptr = _front;
                _front = _front->next;
                ptr->next=NULL;
                rear->next=_front;
                cout<<"DeQueue successfully done, "<<ptr->data<<" is deleted..\n"<<endl;
            }
     }
 }

 void display()
 {
     if(_front==NULL & rear==NULL){
        cout<<"Empty Queue..\n"<<endl;
     }
     else{
        struct Node* ptr = _front;
        cout<<"Queue is:"<<endl;
        while(ptr->next!=_front){
                cout<<ptr->data<<"\t";
                ptr = ptr->next;
        }
        cout<<ptr->data<<"\n"<<endl;
     }
 }

 int main()
 {
     int n=0;
     while(n!=4)
     {
         cout<<"==== SELECT ANY ONE ===="<<endl;
         cout<<"1: EnQueue\n2: DeQueue\n3: display\n4: exit"<<endl;
         cout<<"Enter your choice: ";
         cin>>n;
         switch(n)
         {
         case 1:
            {
                enQueue();
                break;
            }
         case 2:
            {
                deQueue();
                break;
            }
         case 3:
            {
                display();
                break;
            }
         case 4:
            break;
         default:
            cout<<"Invalid input..\n"<<endl;
         }
     }
     return 0;

 }
 
 
/*************************************************************************************************************************
//DEQUE IMPLEMENTATION USING CIRCULAR ARRAY
**************************************************************************************************************************/


 #include<iostream>
 using namespace std;

 int my_deque[100],_front=-1,rear=-1;

 void enqueue_front(int n)
 {
     if(_front==0 && rear == n-1){
        cout<<"Deque Overflow..\n"<<endl;
     }
     else if(_front==rear+1){
        cout<<"Deque Overflow..\n"<<endl;
     }

     else{
        if(_front==-1 and rear==-1){
            _front = rear = 0;
        }
        else if(_front==0){
            _front = n-1;
        }
        else{
            _front = _front-1;
        }
        int data;
        cout<<"Enter an element: ";
        cin>>data;
        my_deque[_front] = data;
        cout<<"Enqueue at front successfully done..\n"<<endl;
     }
 }

 void enQueue_rear(int n)
 {
     if(_front==0 & rear==n-1){
        cout<<"Deque Overflow..\n"<<endl;
     }
     else if(_front==rear+1){
        cout<<"Deque Overflow"<<endl;
     }
     else{
        if(_front==-1 && rear==-1){
            _front=rear= 0;
        }
        else if(_front!=0 && rear==n-1){
            rear=0;
        }
        else{
            rear = rear+1;
        }
        int data;
        cout<<"Enter an element: ";
        cin>>data;
        my_deque[rear]=data;
        cout<<"Enqueue at rear end successfully done..\n"<<endl;
     }
 }
 void deQueue_front(int n)
 {
     if(_front==-1 && rear==-1){
        cout<<"Deque Underflow..\n"<<endl;
     }
     else{
        if(_front==rear){
            cout<<"deQueue from front done successfully, "<<my_deque[_front]<<" deleted.\n"<<endl;
            _front=rear=-1;
        }
        else if(_front==n-1){
            cout<<"deQueue from front done successfully, "<<my_deque[_front]<<" deleted.\n"<<endl;
            _front = 0;
        }
        else{
            cout<<"deQueue from front done successfully, "<<my_deque[_front]<<" deleted.\n"<<endl;
            _front=_front+1;
        }
     }
 }

 void deQueue_rear(int n)
 {
     if(_front==-1 && rear==-1){
        cout<<"Deque Underflow..\n"<<endl;
     }
     else{
        if(_front==rear){
            cout<<"deQueue from rear done successfully, "<<my_deque[rear]<<" deleted.\n"<<endl;
            _front=rear=-1;
        }
        else if(rear==0){
            cout<<"deQueue from rear done successfully, "<<my_deque[rear]<<" deleted.\n"<<endl;
            rear = n-1;
        }
        else{
            cout<<"deQueue from rear done successfully, "<<my_deque[rear]<<" deleted.\n"<<endl;
            rear = rear-1;
        }
     }
 }

 void display(int n)
 {
     if(_front==-1 && rear==-1){
        cout<<"Deque is empty..\n"<<endl;
     }
     else{
        if(_front>rear){
            for(int i=_front;i<=n-1;i++){
                cout<<my_deque[i]<<"\t";
            }
            for(int i=0;i<=rear;i++){
                cout<<my_deque[i]<<"\t";
            }
            cout<<"\n"<<endl;
        }
        else{
            for(int i=_front;i<=rear;i++){
                cout<<my_deque[i]<<"\t";
            }
            cout<<"\n"<<endl;
        }
     }
 }

 int main()
 {
     int n,i=0;
     cout<<"Enter the max size: ";
     cin>>n;
     while(i!=8)
     {
         cout<<"==== SELECT ANY ONE ===="<<endl;
         cout<<"1: Enqueue at front\n2: Enqueue at rear\n3: Dequeue from front\n4: Dequeue from rear\n5: get front element\n6: get rear element\n7: display\n8: exit"<<endl;
         cout<<"Enter your choice: ";
         cin>>i;
         switch(i)
         {
         case 1:
            {
                enqueue_front(n);
                break;
            }
         case 2:
            {
                enQueue_rear(n);
                break;
            }
         case 3:
            {
                deQueue_front(n);
                break;
            }
         case 4:
            {
                deQueue_rear(n);
                break;
            }
         case 5:
            {
                cout<<"Front element is "<<my_deque[_front]<<"\n"<<endl;
                break;
            }
         case 6:
            {
                cout<<"Rear element is "<<my_deque[rear]<<"\n"<<endl;
                break;
            }
         case 7:
            {
                display(n);
                break;
            }
         case 8:
            break;

         default:
            cout<<"Invalid Number..\n"<<endl;
         }
     }
     return 0;
 }
